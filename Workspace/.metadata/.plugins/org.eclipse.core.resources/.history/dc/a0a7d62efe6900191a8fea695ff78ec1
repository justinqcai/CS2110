import java.util.ArrayList;

/**
 * Binary Search Tree Class
 * 
 * The head class for a binary search tree implementation.
 * 
 * @author jc5pz
 * @param <Comparable> Type of data to store in the binary tree
 */
public class BinarySearchTree<T extends Comparable<T>> {

	/**
	 * A reference pointer to the root of the tree
	 */
	private TreeNode<T> root;

	/**
	 * Default constructor
	 * 
	 * Creates a binary tree object with null root note (empty tree)
	 */
	public BinarySearchTree() {
		this(null);
	}

	/**
	 * Constructor
	 * 
	 * Creates a binary tree object with the given node as root
	 * 
	 * @param newRoot The root of the tree
	 */
	public BinarySearchTree(TreeNode<T> newRoot) {
		this.root = newRoot;
	}
	
	/**
	 * Get the root of the tree
	 * 
	 * @return The root of the tree
	 */
	public TreeNode<T> getRoot() {
		return root;
	}

	/**
	 * Set the root of the tree
	 * 
	 * @param root  The new root of this tree
	 */
	public void setRoot(TreeNode<T> root) {
		this.root = root;
	}
	
	/**
	 * Find if an element exists
	 * 
	 * Checks to see if the value val appears in the
	 * tree (recursively).  Returns true if it appears
	 * and false otherwise.
	 * 
	 * @param val The value to find
	 * @return True if the tree contains the value, false otherwise
	 */
	public boolean find(T val) {
	    return false;
	}
	/**
	 * 
	 * @return an integer containing the size of the BST (number of total nodes)
	 */
	public int size() {
		TreeNode<T> point = getRoot();
		if(point.getLeft() == null && point.getRight() == null) {
			return 1;
		}
		if(point.getLeft() != null && point.getRight() != null) {
			BinarySearchTree<T> l = new BinarySearchTree<T>(point.getLeft());
			BinarySearchTree<T> r = new BinarySearchTree<T>(point.getRight());
			return 1 + l.size() + r.size();
		}
		else if(point.getLeft() != null) {
			BinarySearchTree<T> l = new BinarySearchTree<T>(point.getLeft());
			return 1 + l.size();
		}
		else if(point.getRight() != null) {
			BinarySearchTree<T> r = new BinarySearchTree<T>(point.getRight());
			return 1 + r.size();
		}
		return 1;
		
	}
	/**
	 * 
	 * @return an integer containing the height of the BST
	 */
	public int height() {
		TreeNode<T> point = getRoot();
		if(point.getLeft() == null && point.getRight() == null) {
			return 1;
		}
		if(point.getLeft() != null && point.getRight() != null) {
			BinarySearchTree<T> l = new BinarySearchTree<T>(point.getLeft());
			BinarySearchTree<T> r = new BinarySearchTree<T>(point.getRight());
			return 1 + Math.max(l.height(), r.height());
		}
		else if(point.getLeft() != null) {
			BinarySearchTree<T> l = new BinarySearchTree<T>(point.getLeft());
			return 1 + l.height();
		}
		else if(point.getRight() != null) {
			BinarySearchTree<T> r = new BinarySearchTree<T>(point.getRight());
			return 1 + r.height();
		}
		return 1;
	}
	
	/**
	 * Insert an element
	 * 
	 * Inserts val into the tree where it should appear, returning
	 * true on success and false otherwise
	 * 
	 * @param val The value to insert
	 * @return True on success, false otherwise
	 */
	public boolean insert(T val) {
	    return false;
	}

	   
    /**
     * Delete an element from the tree
     * 
     * Deletes val from the tree if it appears, returning
     * true on success and false otherwise
     * 
     * @param val The value to delete
     * @return True on success, false otherwise
     */
    public boolean delete(T val) {
        return false;
    }

	
	/**
	 * Build from a list
	 * 
	 * Build the tree from the given list, overwriting any tree data
	 * previously stored in this tree.  Should read from beginning to
	 * end of the list and repeatedly call insert() to build the tree.
	 * 
	 * @param list The list from which to build the tree
	 * @return True if successfully built, false otherwise
	 */
	public boolean buildFromList(ArrayList<T> list) {
	    return false;
	}
	
	   
    /**
     * toString method
     * 
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return null;
    }
	
	/**
	 * Main method
	 * 
	 * For testing, etc
	 * 
	 * @param args Command line arguments
	 */
	public static void main(String[] args) {
		TreeNode<Integer> l = new TreeNode<Integer>();
		TreeNode<Integer> r = new TreeNode<Integer>(); 
		TreeNode<Integer> ro = new TreeNode<Integer>(1, l, r);
		l.setLeft(new TreeNode<Integer>());
		l.setRight(new TreeNode<Integer>());
		r.setLeft(new TreeNode<Integer>());
		r.setRight(new TreeNode<Integer>());
		BinarySearchTree<Integer> bst = new BinarySearchTree<Integer>(ro);
		System.out.println(bst.height());
	}
}